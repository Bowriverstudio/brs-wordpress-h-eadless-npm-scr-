#!/usr/bin/env node

const fs = require("fs-extra");
const path = require("path");

const fetch = require("node-fetch");

const config = require("../../../brs.config");

const generateScaffoldComponent = ({ componentName, slug }) => {
  console.log("Generating - " + componentName + " " + slug);

  const body = JSON.stringify({
    query: `
	query { genesisCustomBlockFileScaffold(slug: "${slug}" template: COMPONENT) {
	content
	name }
	}`,
  });

  fetch(config.endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: body,
  })
    .then((res) => res.json())
    .then((result) => {
      // console.log(JSON.stringify(result.data.genesisCustomBlockFileScaffold));

      result.data.genesisCustomBlockFileScaffold.map((block) => {
        const { name, content } = block;
        const componentDirectory = `${config.scaffold.destination}${componentName}`;
        const fileName = `${config.scaffold.destination}${componentName}/${name}`;
        // Component Exists Does Not Exist or it can be overwritten.
        if (!fs.existsSync(`${fileName}`) || config.scaffold.overwrite) {
          // Create Folder if Required
          if (!fs.existsSync(`${componentDirectory}`)) {
            fs.mkdirSync(`${componentDirectory}`);
            fs.mkdirSync(`${componentDirectory}/tests`);
          }

          if (name) {
            try {
              fs.writeFileSync(
                path.resolve(process.cwd(), fileName),
                content,
                "utf-8"
              );
            } catch (err) {
              // uh-oh, something happened here!
              console.log("ERROR", err.message);
            }
          }
        }
      });
    });
};

const generateScaffold = () => {
  const body = JSON.stringify({
    query: `
	query { genesisCustomBlockSummary {componentName, slug}
	}`,
  });

  fetch(config.endpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: body,
  })
    .then((res) => res.json())
    .then((result) => {
      result.data.genesisCustomBlockSummary.map((block) => {
        generateScaffoldComponent(block);
      });
    });
};

if (config?.scaffold?.generate) {
  generateScaffold();
  console.log("Finished Generate scaffold");
}
